{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ch",
				"children"
			],
			[
				"elem",
				"element"
			],
			[
				"F",
				"FontCache"
			],
			[
				"get",
				"get_among"
			],
			[
				"child",
				"children"
			],
			[
				"get_",
				"get_string"
			],
			[
				"all",
				"all_actions"
			],
			[
				"collec",
				"collection_node_anim"
			],
			[
				"par",
				"parse_space"
			],
			[
				"arma",
				"armatures"
			],
			[
				"array",
				"array_index"
			],
			[
				"matrix",
				"matrix_local"
			],
			[
				"Node",
				"NodeChild"
			],
			[
				"input",
				"input_queue"
			],
			[
				"pu",
				"push_char"
			],
			[
				"Ah",
				"AhEditName"
			],
			[
				"hud",
				"hud_active"
			],
			[
				"hud_",
				"hud_screen"
			],
			[
				"right",
				"right-mid"
			],
			[
				"cursor",
				"cursor_name"
			],
			[
				"Ent",
				"Entity"
			],
			[
				"file",
				"filename"
			],
			[
				"det",
				"details"
			],
			[
				"deta",
				"detail_info"
			],
			[
				"En",
				"EntityGroup"
			],
			[
				"Pro",
				"Projection"
			],
			[
				"Prot",
				"projection"
			],
			[
				"en",
				"energy"
			],
			[
				"i",
				"ilight"
			],
			[
				"pol",
				"poly"
			],
			[
				"on_",
				"on_line"
			],
			[
				"make_",
				"make_rast"
			],
			[
				"GL_DEPTH",
				"GL_DEPTH_COMPONENT"
			],
			[
				"mut",
				"mut_data"
			],
			[
				"code",
				"code_fragment"
			],
			[
				"meta",
				"meta_vertex"
			],
			[
				"met",
				"meta_vertex"
			],
			[
				"tec",
				"Technique"
			],
			[
				"scrol",
				"scroll_x"
			],
			[
				"last_",
				"last_pos"
			],
			[
				"Cam",
				"CamControl"
			],
			[
				"QUat",
				"QuatSpace"
			],
			[
				"Deco",
				"Decodable"
			],
			[
				"ARig",
				"ARightBot"
			],
			[
				"cle",
				"cleanup"
			],
			[
				"enter_",
				"enter_chunk"
			],
			[
				"create_",
				"create_reader"
			],
			[
				"AL_",
				"AL_FORMAT_MONO16"
			],
			[
				"sou",
				"sound_source"
			],
			[
				"cre",
				"create_buffer"
			],
			[
				"open",
				"open_chunk"
			],
			[
				"co",
				"content"
			],
			[
				"y_",
				"y_max"
			],
			[
				"up",
				"update_base"
			],
			[
				"y_m",
				"y_max"
			],
			[
				"Frame",
				"Frame"
			],
			[
				"ATo",
				"ATopMid"
			],
			[
				"Font",
				"FontInfo"
			],
			[
				"glco",
				"glcore"
			],
			[
				"wrap",
				"wrap_modes"
			],
			[
				"test-",
				"test-image"
			],
			[
				"parse_a",
				"parse_anchor"
			],
			[
				"min",
				"min_size"
			],
			[
				"Re",
				"Relation"
			],
			[
				"ali",
				"align"
			],
			[
				"Rel",
				"RelParent"
			],
			[
				"A",
				"ACenter"
			],
			[
				"c",
				"content"
			],
			[
				"to_",
				"to_matrix"
			],
			[
				"po",
				"point"
			],
			[
				"Ve",
				"Vec4"
			],
			[
				"ent",
				"entry"
			],
			[
				"chi",
				"children"
			],
			[
				"tech",
				"techSolid"
			],
			[
				"w",
				"width"
			],
			[
				"b",
				"bytes"
			],
			[
				"di",
				"divide_group"
			],
			[
				"pri",
				"prime"
			],
			[
				"mate",
				"materials"
			],
			[
				"mater",
				"material"
			],
			[
				"mat",
				"material"
			],
			[
				"Materia",
				"MaterialInfo"
			],
			[
				"rotate",
				"rotate_camera"
			],
			[
				"expo",
				"export_meshes"
			],
			[
				"export_",
				"export_meshes"
			],
			[
				"proper",
				"properties"
			],
			[
				"read_key_ori",
				"read_key_orientation_euler"
			],
			[
				"face",
				"face_num"
			],
			[
				"UniFlo",
				"UniFloatVec"
			],
			[
				"Te",
				"Texture"
			],
			[
				"Text",
				"TextureCache"
			],
			[
				"tex",
				"tex_unit"
			],
			[
				"f",
				"filter"
			],
			[
				"map_ma",
				"map_matererial_data"
			],
			[
				"De",
				"Deserializer"
			],
			[
				"dese",
				"deserialize"
			],
			[
				"creat",
				"create_data"
			],
			[
				"Mat",
				"Material"
			],
			[
				"Mater",
				"MaterialInfo"
			],
			[
				"Entit",
				"EntityGroup"
			],
			[
				"spa",
				"spawn"
			],
			[
				"ma",
				"map_node"
			],
			[
				"du",
				"dual_quat"
			],
			[
				"Came",
				"Camera"
			],
			[
				"Camer",
				"CameraInfo"
			],
			[
				"Li",
				"LinearMap"
			],
			[
				"fo",
				"fov"
			],
			[
				"Proje",
				"ProjectorInfo"
			],
			[
				"Light",
				"LightInfo"
			],
			[
				"fov",
				"fov_y"
			],
			[
				"No",
				"NodeInfo"
			],
			[
				"load_",
				"load_config"
			],
			[
				"min_",
				"min_y"
			],
			[
				"line",
				"line_gap"
			],
			[
				"line_",
				"line_number"
			],
			[
				"he",
				"height"
			],
			[
				"t_",
				"t_bubble"
			],
			[
				"pos",
				"pos_x"
			],
			[
				"Bubb",
				"Bubble"
			],
			[
				"Bubble",
				"BubbleManager"
			],
			[
				"Bubbl",
				"BubbleManager"
			],
			[
				"bubble",
				"bubble_param"
			],
			[
				"bub",
				"bubble_param"
			],
			[
				"windo",
				"window_size"
			],
			[
				"debug_",
				"debug_graphics"
			],
			[
				"wid",
				"width_capacity"
			],
			[
				"ba",
				"backup"
			],
			[
				"as",
				"ascender"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/mnt/code/claymore/claymore-game/game/hud_new.rs",
			"settings":
			{
				"buffer_size": 6730,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/game/hud.rs",
			"settings":
			{
				"buffer_size": 15572,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/engine/gr_mid/font.rs",
			"settings":
			{
				"buffer_size": 8677,
				"line_ending": "Unix"
			}
		},
		{
			"file": "codata/hud/common.rs",
			"settings":
			{
				"buffer_size": 1112,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/engine/gr_low/texture.rs",
			"settings":
			{
				"buffer_size": 11907,
				"line_ending": "Unix"
			}
		},
		{
			"file": "codata/hud/chared.rs",
			"settings":
			{
				"buffer_size": 1259,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/game/main.rs",
			"settings":
			{
				"buffer_size": 6332,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/game/scene/battle.rs",
			"settings":
			{
				"buffer_size": 8167,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/engine/gr_mid/draw.rs",
			"settings":
			{
				"buffer_size": 4323,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/engine/object.rs",
			"settings":
			{
				"buffer_size": 902,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 324 files for \"process\" (case sensitive, whole word)\n\n/mnt/code/claymore/claymore-game/engine/object.rs:\n   23  \n   24  pub impl gr_mid::draw::Technique	{\n   25: 	fn process( &self, e : &Entity, output : gr_mid::call::Output, rast : gr_low::rast::State,\n   26  			cache : &mut gr_mid::draw::Cache, ct : &gr_low::context::Context,\n   27  			lg : &journal::Log )-> gr_mid::call::Call	{\n\n/mnt/code/claymore/claymore-game/game/render/lbuf.rs:\n  130  				material: mat,\n  131  			};\n  132: 			self.tech_bake.process( &e, copy output, copy rast, None, gc, lg )\n  133  		};\n  134  		//todo: functional style in Rust-0.6\n\n/mnt/code/claymore/claymore-game/game/scene/battle.rs:\n  129  		rast.set_depth( ~\"<=\", true );\n  130  		rast.prime.cull = true;\n  131: 		let c_land = tech.process( &self.land, copy output, copy rast, None, gc, lg );\n  132: 		let c_hero = tech.process( &self.hero.entity, copy output, copy rast, None, gc, lg );\n  133  		let c_grid = self.grid.call( output.fb, copy output.pmap, self.land.input.va );\n  134  		gc.flush( ~[c_land,c_hero,c_grid] );\n\n/mnt/code/claymore/claymore-game/game/scene/chared.rs:\n  217  				for [&self.gr_main,&self.gr_cape,&self.gr_hair].each() |group|	{\n  218  					for group.each() |ent|	{\n  219: 						queue.push( self.shadow.tech_solid.process( ent,\n  220  							copy self.shadow.output, copy self.shadow.rast,\n  221  							Some( &mut self.cache ), ct, lg ));\n  ...\n  224  				/*for [&self.gr_hair].each() |group|	{\n  225  					for group.each() |ent|	{\n  226: 						queue.push( self.shadow.tech_alpha.process( ent, ct, lg ));\n  227  					}\n  228  				}*/\n  ...\n  234  				for [&mut self.gr_main,&mut self.gr_cape,&mut self.gr_hair].each() |group|	{\n  235  					for group.each_mut() |ent|	{\n  236: 						queue.push( self.depth.tech_solid.process( ent,\n  237  							copy self.depth.output, copy self.depth.rast,\n  238  							Some( &mut self.cache ), ct, lg ));\n  ...\n  253  		if el.character	{\n  254  			for self.gr_main.each() |ent|	{\n  255: 				queue.push( tech.process( ent, copy output, copy self.rast_solid, Some( &mut self.cache ), ct, lg ) );\n  256  			}\n  257  			for self.gr_cape.each() |ent|	{\n  258: 				queue.push( tech.process( ent, copy output, copy self.rast_cloak, Some( &mut self.cache ), ct, lg ) );	\n  259  			}\n  260  			for self.gr_hair.each() |ent|	{\n  261: 				queue.push( tech.process( ent, copy output, copy self.rast_alpha, Some( &mut self.cache ), ct, lg ) );\n  262  			}\n  263  		}\n  264  		if el.shadow	{\n  265  			for self.gr_other.each() |ent|	{\n  266: 				queue.push( tech.process( ent, copy output, copy self.rast_solid, Some( &mut self.cache ), ct, lg ) );\n  267  			}\n  268  		}\n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_mat/__init__.py:\n   46  		default=Settings.showWarning )\n   47  	break_err	= BoolProperty( name='Break on error',\n   48: 		description='Stop the process on first error',\n   49  		default=Settings.breakError )\n   50  \n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_mesh/__init__.py:\n   46  		default=Settings.showWarning )\n   47  	break_err	= BoolProperty( name='Break on error',\n   48: 		description='Stop the process on first error',\n   49  		default=Settings.breakError )\n   50  	put_normal	= BoolProperty( name='Put normals',\n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_scene/__init__.py:\n   54  		default=Settings.showWarning )\n   55  	break_err	= BoolProperty( name='Break on error',\n   56: 		description='Stop the process on first error',\n   57  		default=Settings.breakError )\n   58  	# mesh settings\n\n/mnt/code/claymore/claymore-game/util/sample/demo03-materials.rs:\n  167  		let mx = e.node.world_space().to_matrix();\n  168  		s.data.insert( ~\"u_World\", engine::shade::UniMatrix(false,mx) );\n  169: 		calls.push( t.process( e, &s.context, copy s.data ));\n  170  	}\n  171  	s.context.flush(calls);\n\n/mnt/code/claymore/claymore-game/util/sample/demo04-skeleton.rs:\n  153  		let c0 = engine::call::CallClear( t.fbo, copy t.pmap,\n  154  			cdata, t.rast.scissor, t.rast.mask );\n  155: 		let c1 = t.process( &s.entity, &s.context );\n  156  		s.context.flush(~[c0,c1]);\n  157  	}\n\n/mnt/code/claymore/rust-stb-image/stb_image.c:\n   81  //    int x,y,n;\n   82  //    unsigned char *data = stbi_load(filename, &x, &y, &n, 0);\n   83: //    // ... process data if not NULL ... \n   84  //    // ... x = width, y = height, n = # 8-bit components per pixel ...\n   85  //    // ... replace '0' with '1'..'4' to force that many components per pixel\n   ..\n  288  extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);\n  289  \n  290: // indicate whether we should process iphone images back to canonical format,\n  291  // or just pass them through \"as-is\"\n  292  extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);\n  ...\n 1363        short data[64];\n 1364        int n = z->order[0];\n 1365:       // non-interleaved data, we just need to process one block at a time,\n 1366        // in trivial scanline order\n 1367        // number of blocks to do just depends on how many actual \"pixels\" this\n ....\n 1392        for (j=0; j < z->img_mcu_y; ++j) {\n 1393           for (i=0; i < z->img_mcu_x; ++i) {\n 1394:             // scan an interleaved mcu... process scan_n components in order\n 1395              for (k=0; k < z->scan_n; ++k) {\n 1396                 int n = z->order[k];\n\n20 matches across 10 files\n\n\nSearching 324 files for \"process\" (case sensitive, whole word)\n\n/mnt/code/claymore/claymore-game/engine/object.rs:\n   23  \n   24  pub impl gr_mid::draw::Technique	{\n   25: 	fn process( &self, e : &Entity, output : gr_mid::call::Output, rast : gr_low::rast::State,\n   26  			cache : &mut gr_mid::draw::Cache, ct : &gr_low::context::Context,\n   27  			lg : &journal::Log )-> gr_mid::call::Call	{\n\n/mnt/code/claymore/claymore-game/game/render/lbuf.rs:\n  132  				material: mat,\n  133  			};\n  134: 			self.tech_bake.process( &e, copy output, copy rast, self.cache, gc, lg )\n  135  		};\n  136  		//todo: functional style in Rust-0.6\n\n/mnt/code/claymore/claymore-game/game/scene/battle.rs:\n  129  		rast.set_depth( ~\"<=\", true );\n  130  		rast.prime.cull = true;\n  131: 		let c_land = tech.process( &self.land, copy output, copy rast, None, gc, lg );\n  132: 		let c_hero = tech.process( &self.hero.entity, copy output, copy rast, None, gc, lg );\n  133  		let c_grid = self.grid.call( output.fb, copy output.pmap, self.land.input.va );\n  134  		gc.flush( ~[c_land,c_hero,c_grid] );\n\n/mnt/code/claymore/claymore-game/game/scene/chared.rs:\n  217  				for [&self.gr_main,&self.gr_cape,&self.gr_hair].each() |group|	{\n  218  					for group.each() |ent|	{\n  219: 						queue.push( self.shadow.tech_solid.process( ent,\n  220  							copy self.shadow.output, copy self.shadow.rast,\n  221  							Some( &mut self.cache ), ct, lg ));\n  ...\n  224  				/*for [&self.gr_hair].each() |group|	{\n  225  					for group.each() |ent|	{\n  226: 						queue.push( self.shadow.tech_alpha.process( ent, ct, lg ));\n  227  					}\n  228  				}*/\n  ...\n  234  				for [&mut self.gr_main,&mut self.gr_cape,&mut self.gr_hair].each() |group|	{\n  235  					for group.each_mut() |ent|	{\n  236: 						queue.push( self.depth.tech_solid.process( ent,\n  237  							copy self.depth.output, copy self.depth.rast,\n  238  							Some( &mut self.cache ), ct, lg ));\n  ...\n  253  		if el.character	{\n  254  			for self.gr_main.each() |ent|	{\n  255: 				queue.push( tech.process( ent, copy output, copy self.rast_solid, Some( &mut self.cache ), ct, lg ) );\n  256  			}\n  257  			for self.gr_cape.each() |ent|	{\n  258: 				queue.push( tech.process( ent, copy output, copy self.rast_cloak, Some( &mut self.cache ), ct, lg ) );	\n  259  			}\n  260  			for self.gr_hair.each() |ent|	{\n  261: 				queue.push( tech.process( ent, copy output, copy self.rast_alpha, Some( &mut self.cache ), ct, lg ) );\n  262  			}\n  263  		}\n  264  		if el.shadow	{\n  265  			for self.gr_other.each() |ent|	{\n  266: 				queue.push( tech.process( ent, copy output, copy self.rast_solid, Some( &mut self.cache ), ct, lg ) );\n  267  			}\n  268  		}\n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_mat/__init__.py:\n   46  		default=Settings.showWarning )\n   47  	break_err	= BoolProperty( name='Break on error',\n   48: 		description='Stop the process on first error',\n   49  		default=Settings.breakError )\n   50  \n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_mesh/__init__.py:\n   46  		default=Settings.showWarning )\n   47  	break_err	= BoolProperty( name='Break on error',\n   48: 		description='Stop the process on first error',\n   49  		default=Settings.breakError )\n   50  	put_normal	= BoolProperty( name='Put normals',\n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_scene/__init__.py:\n   54  		default=Settings.showWarning )\n   55  	break_err	= BoolProperty( name='Break on error',\n   56: 		description='Stop the process on first error',\n   57  		default=Settings.breakError )\n   58  	# mesh settings\n\n/mnt/code/claymore/claymore-game/util/sample/demo03-materials.rs:\n  167  		let mx = e.node.world_space().to_matrix();\n  168  		s.data.insert( ~\"u_World\", engine::shade::UniMatrix(false,mx) );\n  169: 		calls.push( t.process( e, &s.context, copy s.data ));\n  170  	}\n  171  	s.context.flush(calls);\n\n/mnt/code/claymore/claymore-game/util/sample/demo04-skeleton.rs:\n  153  		let c0 = engine::call::CallClear( t.fbo, copy t.pmap,\n  154  			cdata, t.rast.scissor, t.rast.mask );\n  155: 		let c1 = t.process( &s.entity, &s.context );\n  156  		s.context.flush(~[c0,c1]);\n  157  	}\n\n/mnt/code/claymore/rust-stb-image/stb_image.c:\n   81  //    int x,y,n;\n   82  //    unsigned char *data = stbi_load(filename, &x, &y, &n, 0);\n   83: //    // ... process data if not NULL ... \n   84  //    // ... x = width, y = height, n = # 8-bit components per pixel ...\n   85  //    // ... replace '0' with '1'..'4' to force that many components per pixel\n   ..\n  288  extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);\n  289  \n  290: // indicate whether we should process iphone images back to canonical format,\n  291  // or just pass them through \"as-is\"\n  292  extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);\n  ...\n 1363        short data[64];\n 1364        int n = z->order[0];\n 1365:       // non-interleaved data, we just need to process one block at a time,\n 1366        // in trivial scanline order\n 1367        // number of blocks to do just depends on how many actual \"pixels\" this\n ....\n 1392        for (j=0; j < z->img_mcu_y; ++j) {\n 1393           for (i=0; i < z->img_mcu_x; ++i) {\n 1394:             // scan an interleaved mcu... process scan_n components in order\n 1395              for (k=0; k < z->scan_n; ++k) {\n 1396                 int n = z->order[k];\n\n20 matches across 10 files\n\n\nSearching 324 files for \"process\" (case sensitive, whole word)\n\n/mnt/code/claymore/claymore-game/engine/object.rs:\n   23  \n   24  pub impl gr_mid::draw::Technique	{\n   25: 	fn process( &self, e : &Entity, output : gr_mid::call::Output, rast : gr_low::rast::State,\n   26  			cache : &mut gr_mid::draw::Cache, ct : &gr_low::context::Context,\n   27  			lg : &journal::Log )-> gr_mid::call::Call	{\n\n/mnt/code/claymore/claymore-game/game/render/lbuf.rs:\n  132  				material: mat,\n  133  			};\n  134: 			self.tech_bake.process( &e, copy output, copy rast, self.cache, gc, lg )\n  135  		};\n  136  		//todo: functional style in Rust-0.6\n\n/mnt/code/claymore/claymore-game/game/scene/battle.rs:\n  130  		rast.set_depth( ~\"<=\", true );\n  131  		rast.prime.cull = true;\n  132: 		let c_land = tech.process( &self.land, copy output, copy rast, &mut self.cache, gc, lg );\n  133: 		let c_hero = tech.process( &self.hero.entity, copy output, copy rast, &mut self.cache, gc, lg );\n  134  		let c_grid = self.grid.call( output.fb, copy output.pmap, self.land.input.va );\n  135  		gc.flush( ~[c_land,c_hero,c_grid] );\n\n/mnt/code/claymore/claymore-game/game/scene/chared.rs:\n  217  				for [&self.gr_main,&self.gr_cape,&self.gr_hair].each() |group|	{\n  218  					for group.each() |ent|	{\n  219: 						queue.push( self.shadow.tech_solid.process( ent,\n  220  							copy self.shadow.output, copy self.shadow.rast,\n  221  							&mut self.cache, ct, lg ));\n  ...\n  224  				/*for [&self.gr_hair].each() |group|	{\n  225  					for group.each() |ent|	{\n  226: 						queue.push( self.shadow.tech_alpha.process( ent, ct, lg ));\n  227  					}\n  228  				}*/\n  ...\n  234  				for [&mut self.gr_main,&mut self.gr_cape,&mut self.gr_hair].each() |group|	{\n  235  					for group.each_mut() |ent|	{\n  236: 						queue.push( self.depth.tech_solid.process( ent,\n  237  							copy self.depth.output, copy self.depth.rast,\n  238  							&mut self.cache, ct, lg ));\n  ...\n  253  		if el.character	{\n  254  			for self.gr_main.each() |ent|	{\n  255: 				queue.push( tech.process( ent, copy output, copy self.rast_solid, &mut self.cache, ct, lg ) );\n  256  			}\n  257  			for self.gr_cape.each() |ent|	{\n  258: 				queue.push( tech.process( ent, copy output, copy self.rast_cloak, &mut self.cache, ct, lg ) );	\n  259  			}\n  260  			for self.gr_hair.each() |ent|	{\n  261: 				queue.push( tech.process( ent, copy output, copy self.rast_alpha, &mut self.cache, ct, lg ) );\n  262  			}\n  263  		}\n  264  		if el.shadow	{\n  265  			for self.gr_other.each() |ent|	{\n  266: 				queue.push( tech.process( ent, copy output, copy self.rast_solid, &mut self.cache, ct, lg ) );\n  267  			}\n  268  		}\n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_mat/__init__.py:\n   46  		default=Settings.showWarning )\n   47  	break_err	= BoolProperty( name='Break on error',\n   48: 		description='Stop the process on first error',\n   49  		default=Settings.breakError )\n   50  \n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_mesh/__init__.py:\n   46  		default=Settings.showWarning )\n   47  	break_err	= BoolProperty( name='Break on error',\n   48: 		description='Stop the process on first error',\n   49  		default=Settings.breakError )\n   50  	put_normal	= BoolProperty( name='Put normals',\n\n/mnt/code/claymore/claymore-game/util/blender/io_kri_scene/__init__.py:\n   54  		default=Settings.showWarning )\n   55  	break_err	= BoolProperty( name='Break on error',\n   56: 		description='Stop the process on first error',\n   57  		default=Settings.breakError )\n   58  	# mesh settings\n\n/mnt/code/claymore/claymore-game/util/sample/demo03-materials.rs:\n  167  		let mx = e.node.world_space().to_matrix();\n  168  		s.data.insert( ~\"u_World\", engine::shade::UniMatrix(false,mx) );\n  169: 		calls.push( t.process( e, &s.context, copy s.data ));\n  170  	}\n  171  	s.context.flush(calls);\n\n/mnt/code/claymore/claymore-game/util/sample/demo04-skeleton.rs:\n  153  		let c0 = engine::call::CallClear( t.fbo, copy t.pmap,\n  154  			cdata, t.rast.scissor, t.rast.mask );\n  155: 		let c1 = t.process( &s.entity, &s.context );\n  156  		s.context.flush(~[c0,c1]);\n  157  	}\n\n/mnt/code/claymore/rust-stb-image/stb_image.c:\n   81  //    int x,y,n;\n   82  //    unsigned char *data = stbi_load(filename, &x, &y, &n, 0);\n   83: //    // ... process data if not NULL ... \n   84  //    // ... x = width, y = height, n = # 8-bit components per pixel ...\n   85  //    // ... replace '0' with '1'..'4' to force that many components per pixel\n   ..\n  288  extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);\n  289  \n  290: // indicate whether we should process iphone images back to canonical format,\n  291  // or just pass them through \"as-is\"\n  292  extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);\n  ...\n 1363        short data[64];\n 1364        int n = z->order[0];\n 1365:       // non-interleaved data, we just need to process one block at a time,\n 1366        // in trivial scanline order\n 1367        // number of blocks to do just depends on how many actual \"pixels\" this\n ....\n 1392        for (j=0; j < z->img_mcu_y; ++j) {\n 1393           for (i=0; i < z->img_mcu_x; ++i) {\n 1394:             // scan an interleaved mcu... process scan_n components in order\n 1395              for (k=0; k < z->scan_n; ++k) {\n 1396                 int n = z->order[k];\n\n20 matches across 10 files\n",
			"settings":
			{
				"buffer_size": 16151,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/game/render/lbuf.rs",
			"settings":
			{
				"buffer_size": 5458,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/mnt/code/claymore/claymore-game/game/scene/chared.rs",
			"settings":
			{
				"buffer_size": 13789,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 52.0,
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: Ok(…)"
			],
			[
				"tab",
				"View: Toggle Tabs"
			],
			[
				"",
				"Build: Build"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/mnt/code/claymore/claymore-game/util/codata/hud/common.rs",
		"/mnt/code/claymore/claymore-game/util/codata/scene/battle/main.rs",
		"/mnt/code/claymore/claymore-game/game/scene/load.rs",
		"/mnt/code/claymore/claymore-game/engine/load.rs",
		"/mnt/code/claymore/claymore-game/util/codata/hud/chared.rs",
		"/mnt/code/claymore/claymore-game/data/hud/char.json",
		"/mnt/code/claymore/claymore-game/util/codata/hud/hud.rs",
		"/mnt/code/claymore/claymore-game/game/hud.rs",
		"/mnt/code/claymore/claymore-game/game/claymore.rs",
		"/mnt/code/claymore/claymore-game/util/codata/scene/common.rs",
		"/mnt/code/claymore/claymore-game/util/blender/io_kri_scene/scene.py",
		"/mnt/code/claymore/claymore-game/util/blender/io_kri/action.py",
		"/mnt/code/claymore/claymore-game/engine/gr_mid/mesh.rs",
		"/mnt/code/claymore/claymore-game/util/blender/io_kri_mesh/mesh.py",
		"/mnt/code/claymore/claymore-game/game/scene/common.rs",
		"/mnt/code/claymore/claymore-game/data/details.json",
		"/mnt/code/claymore/claymore-game/game/scene/chared.rs",
		"/mnt/code/claymore/claymore-game/game/scene/battle.rs",
		"/mnt/code/claymore/claymore-game/.hgignore",
		"/mnt/code/claymore/claymore-game/game/scene/load_json.rs",
		"/mnt/code/claymore/claymore-game/util/blender/io_kri_arm/arm.py",
		"/mnt/code/claymore/claymore-game/util/blender/io_kri_scene/__init__.py",
		"/Users/kvark/Code/rust/claymore-game/game/battle.rs",
		"/Users/kvark/Code/rust/claymore-game/data/hud/char.json",
		"/Users/kvark/Code/rust/claymore-game/game/chared.rs",
		"/Users/kvark/Code/rust/claymore-game/game/hud.rs",
		"/Users/kvark/Code/rust/claymore-game/game/main.rs",
		"/Users/kvark/Code/rust/glfw3-rs/src/glfw3.rc",
		"/Users/kvark/Code/rust/claymore-game/engine/font.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/shade.rs",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/phong.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/forward/spot-shadow.glslf",
		"/Users/kvark/Code/rust/claymore-game/game/scene.rs",
		"/Users/kvark/Code/rust/claymore-game/data/details.json",
		"/Users/kvark/Code/rust/claymore-game/Makefile",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/armor.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/cloak.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/skin.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/cloak.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/armor.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/hair.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/claymore-2.mat.json",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/forward/spot-shadow.glslv",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri_scene/scene.py",
		"/Users/kvark/Code/rust/claymore-game/data/claymore-2a.mat.json",
		"/Users/kvark/Code/rust/cgmath-rs/src/projection.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/frame.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/call.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/rast.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/texture.rs",
		"/Users/kvark/Code/rust/claymore-game/game/shadow.rs",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/shadow/spot.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/shadow/spot-alpha.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/shadow/spot-alpha.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/shadow/spot.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/phong.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/phong_tangent.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/fresnel.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/flat.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/hair.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/flat.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/forward/light.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/claymore-2.log",
		"/Users/kvark/Code/rust/claymore-game/engine/context.rs",
		"/Users/kvark/Code/rust/claymore-game/game/grid.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/draw.rs",
		"/Users/kvark/Code/rust/claymore-game/data/config.json",
		"/Users/kvark/Code/rust/claymore-game/engine/buf.rs",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/fresnel.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/phong_tangent.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/mat/test.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/test.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/forward/light.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/tech/shadow/empty.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/skin.glslv",
		"/Users/kvark/Code/rust/claymore-game/game/claymore.rc",
		"/Users/kvark/Code/rust/claymore-game/data/code/shadow/spot.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/bg.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/copy.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/copy.glslf",
		"/Users/kvark/Code/rust/claymore-game/engine/mesh.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/load.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/anim.rs",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/armor-test.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/armor-test.glslf",
		"/Users/kvark/Code/rust/claymore-game/engine/engine.rc",
		"/Users/kvark/Code/rust/claymore-game/data/hud/char-orig.json",
		"/Users/kvark/Code/rust/claymore-game/engine/audio.rs",
		"/Users/kvark/Code/rust/claymore-game/engine/space.rs",
		"/Users/kvark/Code/rust/lmath-rs/src/mat4.rs",
		"/Users/kvark/Code/rust/rust-freetype/freetype.rs",
		"/Users/kvark/Code/rust/claymore-game/util/claymore",
		"/Users/kvark/Code/rust/lmath-rs/src/gltypes.rs",
		"/Users/kvark/Code/rust/lmath-rs/src/angle.rs",
		"/Users/kvark/Code/rust/claymore-game/data/sound/stereol.wav",
		"/Users/kvark/Code/rust/claymore-game/data/sound/panther.wav",
		"/Users/kvark/Code/rust/claymore-game/.hgignore",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/image.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/image.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/debug.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/debug.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/envir.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/envir.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/claymore-2.json",
		"/Users/kvark/Code/rust/rust-stb-image/image.rs",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char/envir.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char-armor.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char-armor.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char-skin.glslv",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri_mesh/mesh.py",
		"/Users/kvark/Code/rust/claymore-game/data/code-game/char-skin.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/../claymore-2.mat.json",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri_scene/__init__.py",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri/action.py",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri/common.py",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri_arm/__init__.py",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri_mesh/__init__.py",
		"/Users/kvark/Code/rust/claymore-game/util/blender/io_kri_arm/arm.py",
		"/Users/kvark/Code/rust/claymore-game/data/object/scene.json",
		"/Users/kvark/Code/rust/claymore-game/test.rs",
		"/Users/kvark/Code/rust/claymore-game/data/object",
		"/Users/kvark/Code/rust/openal-rs/src/al.rs",
		"/Users/kvark/Code/rust/openal-rs/src/alc.rs",
		"/Users/kvark/Code/rust/openal-rs/src/openal.rc",
		"/Users/kvark/Code/rust/claymore-game/sample/demo05-text.rs",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/text_bubble.glslf",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/text_bubble.glslv",
		"/Users/kvark/Code/rust/claymore-game/data/code/hud/text.glslf"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"process",
			"cache",
			"process",
			"Idle",
			"screen",
			"Texture",
			"IDENTIFICATION",
			"Eq",
			"IterBytes",
			"context::",
			"context",
			"fc",
			"texture",
			"context::",
			"context",
			"gr_low",
			"shade",
			"gr_low",
			"id.caption.left",
			"id.caption.text",
			"id.caption.frame",
			"id.frame",
			"load_config",
			"grid::",
			"grid",
			"scene::",
			"vfov",
			"ChildCam",
			"required attribute",
			"has_more",
			"mesh",
			"mesh:",
			"parse_child",
			"get_input",
			"query_mesh",
			"parse_bones",
			"parse_child",
			"read_action",
			"out_arm",
			"ChildArm",
			"Armature",
			"mouse",
			"KeyFun",
			"self",
			"~\"\";\n",
			"game",
			"CharFun",
			"focus",
			"glfwSetInputMode",
			"fullscreen",
			"error",
			"update",
			"));\n",
			"el",
			";\n",
			");\n",
			"		(",
			"EditLabel",
			"skirt",
			"u_SpecularParams",
			"Angle",
			"make_rast",
			"el.shadow",
			"bind_frame_buffer",
			"depth-render",
			"shift",
			"Scroll",
			"scroll",
			"tan",
			"Camera",
			"rotate_camera",
			"println",
			"add",
			"println",
			"Group size",
			"180f",
			"auto_decode",
			"auto_deserialize",
			"to_gl_type",
			"lmath",
			"vec3",
			"lmath",
			"GLType",
			"fail",
			"#[deriv",
			"#[deriving_eq]",
			"center",
			"not a list",
			"\"not a list\"",
			"not a list",
			"create_reader",
			"NAME_SIZE",
			"alBuffer",
			"0u",
			"iter_bytes",
			"margin",
			"&(",
			"get_corner",
			"Camera",
			"    ",
			"load_technique",
			"u_CameraPos",
			"Pi",
			"Unable to find meta",
			"groups",
			"Unable to find curve",
			"face_num",
			"out.stop",
			"out.log",
			"save_matrix",
			"save_color",
			"out = Writer.inst = Writer(filename)",
			"inst",
			"extens",
			"Writer.inst",
			"mesh",
			"to_vec",
			"spawn",
			"@engine::draw::load_material( copy imat.code_path );",
			"unsafe",
			"{\n",
			"unsafe",
			"fail",
			"unsafe",
			"\n		",
			"unsafe",
			"addr_of",
			"add_of"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"auto_decode",
			"log.stop",
			"log.log",
			"self.",
			"new"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/mnt/code/claymore/claymore-game/game/hud_new.rs",
					"settings":
					{
						"buffer_size": 6730,
						"regions":
						{
						},
						"selection":
						[
							[
								6730,
								6730
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2565.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/mnt/code/claymore/claymore-game/game/hud.rs",
					"settings":
					{
						"buffer_size": 15572,
						"regions":
						{
						},
						"selection":
						[
							[
								10460,
								10460
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5861.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/mnt/code/claymore/claymore-game/engine/gr_mid/font.rs",
					"settings":
					{
						"buffer_size": 8677,
						"regions":
						{
						},
						"selection":
						[
							[
								3108,
								3108
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1817.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "codata/hud/common.rs",
					"settings":
					{
						"buffer_size": 1112,
						"regions":
						{
						},
						"selection":
						[
							[
								877,
								877
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 144.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/mnt/code/claymore/claymore-game/engine/gr_low/texture.rs",
					"settings":
					{
						"buffer_size": 11907,
						"regions":
						{
						},
						"selection":
						[
							[
								3171,
								3171
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 822.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "codata/hud/chared.rs",
					"settings":
					{
						"buffer_size": 1259,
						"regions":
						{
						},
						"selection":
						[
							[
								661,
								661
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/mnt/code/claymore/claymore-game/game/main.rs",
					"settings":
					{
						"buffer_size": 6332,
						"regions":
						{
						},
						"selection":
						[
							[
								2124,
								2124
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 589.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/mnt/code/claymore/claymore-game/game/scene/battle.rs",
					"settings":
					{
						"buffer_size": 8167,
						"regions":
						{
						},
						"selection":
						[
							[
								8167,
								8167
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3735.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/mnt/code/claymore/claymore-game/engine/gr_mid/draw.rs",
					"settings":
					{
						"buffer_size": 4323,
						"regions":
						{
						},
						"selection":
						[
							[
								2831,
								2831
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1305.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/mnt/code/claymore/claymore-game/engine/object.rs",
					"settings":
					{
						"buffer_size": 902,
						"regions":
						{
						},
						"selection":
						[
							[
								621,
								621
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"settings":
					{
						"buffer_size": 16151,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										176,
										183
									],
									[
										513,
										520
									],
									[
										779,
										786
									],
									[
										867,
										874
									],
									[
										1287,
										1294
									],
									[
										1554,
										1561
									],
									[
										1790,
										1797
									],
									[
										2017,
										2024
									],
									[
										2185,
										2192
									],
									[
										2354,
										2361
									],
									[
										2558,
										2565
									],
									[
										2866,
										2873
									],
									[
										3138,
										3145
									],
									[
										3458,
										3465
									],
									[
										3762,
										3769
									],
									[
										4041,
										4048
									],
									[
										4284,
										4291
									],
									[
										4621,
										4628
									],
									[
										4920,
										4927
									],
									[
										5230,
										5237
									],
									[
										5565,
										5572
									],
									[
										5902,
										5909
									],
									[
										6174,
										6181
									],
									[
										6262,
										6269
									],
									[
										6682,
										6689
									],
									[
										6949,
										6956
									],
									[
										7185,
										7192
									],
									[
										7412,
										7419
									],
									[
										7580,
										7587
									],
									[
										7749,
										7756
									],
									[
										7953,
										7960
									],
									[
										8261,
										8268
									],
									[
										8533,
										8540
									],
									[
										8853,
										8860
									],
									[
										9157,
										9164
									],
									[
										9436,
										9443
									],
									[
										9679,
										9686
									],
									[
										10016,
										10023
									],
									[
										10315,
										10322
									],
									[
										10625,
										10632
									],
									[
										10960,
										10967
									],
									[
										11297,
										11304
									],
									[
										11569,
										11576
									],
									[
										11668,
										11675
									],
									[
										12099,
										12106
									],
									[
										12358,
										12365
									],
									[
										12594,
										12601
									],
									[
										12813,
										12820
									],
									[
										12973,
										12980
									],
									[
										13134,
										13141
									],
									[
										13330,
										13337
									],
									[
										13630,
										13637
									],
									[
										13902,
										13909
									],
									[
										14222,
										14229
									],
									[
										14526,
										14533
									],
									[
										14805,
										14812
									],
									[
										15048,
										15055
									],
									[
										15385,
										15392
									],
									[
										15684,
										15691
									],
									[
										15994,
										16001
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								819,
								819
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/mnt/code/claymore/claymore-game/game/render/lbuf.rs",
					"settings":
					{
						"buffer_size": 5458,
						"regions":
						{
						},
						"selection":
						[
							[
								272,
								272
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/mnt/code/claymore/claymore-game/game/scene/chared.rs",
					"settings":
					{
						"buffer_size": 13789,
						"regions":
						{
						},
						"selection":
						[
							[
								6380,
								6380
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust/Rust.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2622.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 163.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 216.0,
	"status_bar_visible": true
}
